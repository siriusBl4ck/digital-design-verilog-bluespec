//
// Generated by Bluespec Compiler (build 26e119fb)
//
// On Wed Jun  9 16:13:41 IST 2021
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTest(CLK,
	      RST_N);
  input  CLK;
  input  RST_N;

  // ports of submodule m
  wire [31 : 0] m$get_z, m$put_x_x, m$put_y_y;
  wire m$EN_get_z,
       m$EN_put_x,
       m$EN_put_y,
       m$RDY_get_z,
       m$RDY_put_x,
       m$RDY_put_y;

  // rule scheduling signals
  wire WILL_FIRE_RL_rl_go;

  // declarations used by system tasks
  // synopsys translate_off
  reg [63 : 0] v__h95;
  reg [63 : 0] v__h194;
  // synopsys translate_on

  // submodule m
  mkMult m(.CLK(CLK),
	   .RST_N(RST_N),
	   .put_x_x(m$put_x_x),
	   .put_y_y(m$put_y_y),
	   .EN_put_x(m$EN_put_x),
	   .EN_put_y(m$EN_put_y),
	   .EN_get_z(m$EN_get_z),
	   .RDY_put_x(m$RDY_put_x),
	   .RDY_put_y(m$RDY_put_y),
	   .get_z(m$get_z),
	   .RDY_get_z(m$RDY_get_z));

  // rule RL_rl_go
  assign WILL_FIRE_RL_rl_go = m$RDY_put_y && m$RDY_put_x ;

  // submodule m
  assign m$put_x_x = 32'd9 ;
  assign m$put_y_y = 32'd5 ;
  assign m$EN_put_x = WILL_FIRE_RL_rl_go ;
  assign m$EN_put_y = WILL_FIRE_RL_rl_go ;
  assign m$EN_get_z = m$RDY_get_z ;

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_go)
	begin
	  v__h95 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_go) $display(v__h95);
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY_get_z)
	begin
	  v__h194 = $time;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE) if (m$RDY_get_z) $display(v__h194);
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY_get_z) $display("we are in rl_finish");
    if (RST_N != `BSV_RESET_VALUE)
      if (m$RDY_get_z) $display("Product = %d", $signed(m$get_z));
    if (RST_N != `BSV_RESET_VALUE) if (m$RDY_get_z) $finish(32'd1);
  end
  // synopsys translate_on
endmodule  // mkTest

